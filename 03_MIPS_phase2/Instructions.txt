001000_00000_00001_00000_01111_101000//addi r1, r0, 1000 (r1 = address of array)
001000_00000_00010_00000_10000_010000//addi r2, r0, 10 * 4 + 1000 (r2 = end of array: start of array + size of array * 4)
001000_00000_00011_00000_11111_010000//addi r3, r0, 2000 (r3 = address of result)
000011_00000_00000_00000_00001_111101//jal Accumulate_program
001010_00100_00111_00000_00000_000000//if r4 < 0 --> r7 = 1
000101_00000_00111_00000_00000_000001//bne r0, r7, LABEL1 
000000_00000_00000_00100_00000_100000//add r4, r0, r0
000000_00000_00000_00111_00000_100000//LABEL1: add r7, r0, r0(after this instruction, we should turn the clock off) (6 + 50 + 1 + 2 + 4 instructions)
@07D// address of Accumulate_program = 500(125th cell of InstMem)
000000_00000_00000_00100_00000_100000//add r4, r0, r0
000000_00000_00001_00101_00000_100000//add r5, r0, r1
000100_00010_00101_00000_00000_000100//LOOP: beq r2, r5, END_LOOP
100011_00101_00110_00000_00000_000000//lw r6, 0(r5)
000000_00100_00110_00100_00000_100000//add r4, r4, r6
001000_00101_00101_00000_00000_000100//addi r5, r5, 4
000010_00000_00000_00000_00001_111111//j LOOP
101011_00011_00100_00000_00000_000000//END_LOOP: sw r4, 0(r3)
000000_11111_00000_00000_00000_001000//jr 31 (END_OF_PROGRAM)